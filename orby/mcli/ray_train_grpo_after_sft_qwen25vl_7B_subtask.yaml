name: verl-finetune

image: whatcanyousee/verl:ngc-cu124-vllm0.8.3-sglang0.4.5-mcore0.12.0-te2.2

integrations:
  - integration_type: git_repo
    git_repo: orby-ai-engineering/verl
    git_branch: main
    pip_install: .
    ssh_clone: true

compute:
  gpus: 32 # Number of GPUs to use
  cluster: r8z13p2
  gpu_type: h100_80gb

command: |
  # Set these variables before running the script.
  export EXPERIMENT_NAME="SET THE EXPERIMENT NAME HERE"
  export S3_BASE_MODEL_PATH="SET THE BASE MODEL PATH HERE"
  export S3_TRAIN_FILES=s3://orby-osu-va/subtask_comparison_study/data/generated/e_rm_grpo_half_sft_exp_7_filtered_e_0.3-0.6_rm_0.2-0.7/part-00000-tid-6696905117826521604-f75c158c-4ed7-446a-8e4c-7281420ce72b-5961-1-c000.snappy.parquet
  export S3_VAL_FILES=s3://orby-osu-va/subtask_comparison_study/data/test/e_rm_full/part-00000-tid-6116228279497623000-6660e492-d87d-4c87-903b-261c86c79b92-531-1-c000.snappy.parquet
  export NUM_NODES=4
  export TRAIN_BATCH_SIZE=128

  # Set training environment variables
  export LOCAL_BASE_MODEL_PATH=$HOME/checkpoints/base_model
  export PROJECT_NAME=verl_sft_grpo_subtask
  export S3_CHECKPOINT_DIR=s3://orby-osu-va/verl-checkpoints/sft_grpo_subtask/$EXPERIMENT_NAME
  export LOCAL_TRAIN_FILES=$HOME/data/subtask_direct_distill/mix/train.parquet
  export LOCAL_VAL_FILES=$HOME/data/subtask_direct_distill/mix/test.parquet
  export REWARD_FN=training_reward_func
  export REWARD_FILE=orby/reward/subtask.py
  export COORDINATES_METRIC="gaussian"
  export COORDINATES_GAUSSIAN_SIGMA=2
  export COORDINATES_PIXEL_SQUARE_SIZE=10

  # Sanity check
  if [ "$EXPERIMENT_NAME" = "SET THE EXPERIMENT NAME HERE" ]; then
    echo "EXPERIMENT_NAME is not set"
    exit 1
  fi
  if [ "$S3_BASE_MODEL_PATH" = "SET THE BASE MODEL PATH HERE" ]; then
    echo "S3_BASE_MODEL_PATH is not set"
    exit 1
  fi

  # Init environment
  cd /workspace/verl
  sed -i 's|mirrors.tuna.tsinghua.edu.cn|us.archive.ubuntu.com|g' /etc/apt/sources.list
  apt update
  apt install iproute2 -y
  apt install -y dnsutils
  apt install -y emacs
  apt install -y awscli
  pip install 'urllib3<2'
  pip install s3fs
  pip install parquet-tools
  pip install sgl-kernel
  pip install boto3

  # Set environment variables
  export HYDRA_FULL_ERROR=1
  INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)
  echo "Using interface: $INTERFACE"
  export GLOO_SOCKET_IFNAME=$INTERFACE
  export HF_HUB_ENABLE_HF_TRANSFER=1
  export CUDA_LAUNCH_BLOCKING=1

  # Download model
  aws s3 cp $S3_BASE_MODEL_PATH $LOCAL_BASE_MODEL_PATH --recursive

  # Install verl lib: https://verl.readthedocs.io/en/latest/start/install.html
  pip3 install -e .[vllm]

  # Download merged datasets
  aws s3 cp $S3_VAL_FILES $LOCAL_VAL_FILES
  aws s3 cp $S3_TRAIN_FILES $LOCAL_TRAIN_FILES

  # Start ray cluster and wait for all nodes
  bash orby/scripts/run_ray.sh $NUM_NODES
  
  ray status
  if [ "$NODE_RANK" = "0" ]; then
      ray job submit --address="http://127.0.0.1:8265" \
        --runtime-env=verl/trainer/runtime_env.yaml \
        --no-wait \
        -- \
        python3 -m verl.trainer.main_ppo \
            custom_reward_function.path=$REWARD_FILE \
            custom_reward_function.name=$REWARD_FN \
            +custom_reward_function.reward_kwargs.coordinates_metric=$COORDINATES_METRIC \
            +custom_reward_function.reward_kwargs.coordinates_gaussian_sigma=$COORDINATES_GAUSSIAN_SIGMA \
            +custom_reward_function.reward_kwargs.coordinates_pixel_square_size=$COORDINATES_PIXEL_SQUARE_SIZE \
            algorithm.adv_estimator=grpo \
            data.train_files=$LOCAL_TRAIN_FILES \
            data.val_files=$LOCAL_VAL_FILES \
            data.train_batch_size=$TRAIN_BATCH_SIZE \
            data.max_prompt_length=7680 \
            data.max_response_length=512 \
            data.filter_overlong_prompts=False \
            data.truncation='error' \
            data.image_key=images \
            data.shuffle=True \
            actor_rollout_ref.model.path=$LOCAL_BASE_MODEL_PATH \
            actor_rollout_ref.actor.optim.lr=1e-6 \
            actor_rollout_ref.model.use_remove_padding=True \
            actor_rollout_ref.actor.ppo_mini_batch_size=$TRAIN_BATCH_SIZE \
            actor_rollout_ref.actor.ppo_micro_batch_size_per_gpu=4 \
            actor_rollout_ref.actor.ppo_max_token_len_per_gpu=8192 \
            actor_rollout_ref.actor.use_kl_loss=True \
            actor_rollout_ref.actor.kl_loss_coef=0.01 \
            actor_rollout_ref.actor.kl_loss_type=low_var_kl \
            actor_rollout_ref.actor.entropy_coeff=0 \
            actor_rollout_ref.model.enable_gradient_checkpointing=True \
            actor_rollout_ref.actor.fsdp_config.param_offload=True \
            actor_rollout_ref.actor.fsdp_config.optimizer_offload=True \
            actor_rollout_ref.rollout.log_prob_micro_batch_size_per_gpu=16 \
            actor_rollout_ref.rollout.log_prob_max_token_len_per_gpu=8192 \
            actor_rollout_ref.rollout.tensor_model_parallel_size=4 \
            actor_rollout_ref.rollout.name=vllm \
            actor_rollout_ref.rollout.gpu_memory_utilization=0.4 \
            actor_rollout_ref.rollout.enable_chunked_prefill=False \
            actor_rollout_ref.rollout.enforce_eager=True \
            actor_rollout_ref.rollout.free_cache_engine=True \
            actor_rollout_ref.rollout.n=4 \
            actor_rollout_ref.rollout.max_model_len=8192 \
            +actor_rollout_ref.rollout.limit_images=3 \
            actor_rollout_ref.ref.log_prob_micro_batch_size_per_gpu=16 \
            actor_rollout_ref.ref.log_prob_max_token_len_per_gpu=8192 \
            actor_rollout_ref.ref.fsdp_config.param_offload=True \
            algorithm.use_kl_in_reward=False \
            trainer.critic_warmup=0 \
            trainer.logger=['console','wandb'] \
            trainer.project_name=$PROJECT_NAME \
            trainer.experiment_name=$EXPERIMENT_NAME \
            trainer.n_gpus_per_node=8 \
            trainer.nnodes=$NUM_NODES \
            trainer.save_freq=200 \
            trainer.test_freq=20 \
            trainer.s3_checkpoint_dir=$S3_CHECKPOINT_DIR \
            trainer.total_epochs=1 $@ | tee /dev/tty | grep -o "raysubmit_[a-zA-Z0-9]*" | xargs -I{} ray job logs --follow {}
      ray stop
  fi
