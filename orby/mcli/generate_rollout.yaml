name: verl-generate-subtask-7b

image: whatcanyousee/verl:ngc-cu124-vllm0.8.3-sglang0.4.5-mcore0.12.0-te2.2

integrations:
  - integration_type: git_repo
    git_repo: orby-ai-engineering/verl
    git_branch: dev
    pip_install: .
    ssh_clone: true

compute:
  gpus: 16 # Number of GPUs to use
  cluster: r8z13p2
  gpu_type: h100_80gb

command: |
  # Set these variables before running the script.
  export GENERATED_DATASET_NAME="rollout_test"
  export NUM_NODES=2
  export S3_MODEL_CHECKPOINT=s3://orby-osu-va/verl-checkpoints/subtask_sft/sft_experiment_1_Qwen-2.5-VL-7B_e_rm_combined_68k_data_1_epoch_128_batch_size/global_step_532/
  export S3_INPUT_PARQUET=s3://orby-osu-va/subtask/verl/experiment_2/train/executor_reward_model_combined_with_response/part-00000-tid-3712964276653840281-af2210b2-e910-4427-aa16-9f2a2cfdae0a-844-1-c000.snappy.parquet
  export S3_OUTPUT_PARQUET=s3://orby-osu-va/subtask/verl/rollout/${GENERATED_DATASET_NAME}.parquet

  # Set environment variables
  export N_SAMPLES=4
  export TEMPERATURE=0.1
  export BATCH_SIZE=2208
  export LOCAL_MODEL_CHECKPOINT=$HOME/model_checkpoint
  export LOCAL_INPUT_PARQUET_DIR=$HOME/data
  export LOCAL_INPUT_PARQUET=$LOCAL_INPUT_PARQUET_DIR/input.parquet
  export LOCAL_OUTPUT_PARQUET_DIR=$HOME/generated_dataset
  export LOCAL_OUTPUT_PARQUET=$LOCAL_OUTPUT_PARQUET_DIR/output.parquet
  export REWARD_FN=training_reward_func
  export REWARD_FILE=orby/reward/subtask.py
  export COORDINATES_METRIC="gaussian"
  export COORDINATES_GAUSSIAN_SIGMA=5
  export COORDINATES_PIXEL_SQUARE_SIZE=10

  # Init environment
  cd /workspace/verl
  sed -i 's|mirrors.tuna.tsinghua.edu.cn|us.archive.ubuntu.com|g' /etc/apt/sources.list
  apt update
  apt install iproute2 -y
  apt install -y dnsutils
  apt install -y emacs
  apt install -y awscli
  pip install 'urllib3<2'
  pip install s3fs
  pip install parquet-tools
  pip install sgl-kernel
  pip install boto3

  # Set environment variables
  export HYDRA_FULL_ERROR=1
  INTERFACE=$(ip route | grep default | awk '{print $5}' | head -1)
  echo "Using interface: $INTERFACE"
  export GLOO_SOCKET_IFNAME=$INTERFACE
  export HF_HUB_ENABLE_HF_TRANSFER=1
  export CUDA_LAUNCH_BLOCKING=1

  # Install verl lib: https://verl.readthedocs.io/en/latest/start/install.html
  pip3 install -e .[vllm]

  # Download model
  aws s3 cp $S3_MODEL_CHECKPOINT $LOCAL_MODEL_CHECKPOINT --recursive --no-progress

  # Start ray cluster and wait for all nodes
  bash orby/scripts/run_ray.sh $NUM_NODES
  
  ray status
  if [ "$NODE_RANK" = "0" ]; then
    # Download merged datasets
    aws s3 cp $S3_INPUT_PARQUET $LOCAL_INPUT_PARQUET --no-progress

    # Split the dataset into multiple files
    # ~4000 rows per file is ideal for CPU memory
    python3 orby/data/split_parquet.py --input_file $LOCAL_INPUT_PARQUET --output_dir $LOCAL_INPUT_PARQUET_DIR --num_splits 16

    # Generate dataset for each file
    INPUT_PARQUET_FILES=()
    OUTPUT_PARQUET_FILES=()
    for i in {0..15}; do
      if [ $i -lt 10 ]; then
        # Add a 0 to the beginning of the number if it's less than 10
        i=0$i
      fi
      INPUT_PARQUET_FILES+=($LOCAL_INPUT_PARQUET_DIR/split_00${i}.parquet)
      OUTPUT_PARQUET_FILES+=($LOCAL_OUTPUT_PARQUET_DIR/split_00${i}.parquet)
    done
    INPUT_PARQUET_FILES=$(IFS=,; echo "${INPUT_PARQUET_FILES[*]}")
    OUTPUT_PARQUET_FILES=$(IFS=,; echo "${OUTPUT_PARQUET_FILES[*]}")

    ray job submit --address="http://127.0.0.1:8265" \
      --runtime-env=verl/trainer/runtime_env.yaml \
      --no-wait \
      -- \
      python3 -u -m orby.trainer.main_generation \
        trainer.nnodes=$NUM_NODES \
        trainer.n_gpus_per_node=8 \
        data.path="\\'${INPUT_PARQUET_FILES}\\'" \
        data.prompt_key=prompt \
        +data.response_key=predictions \
        data.batch_size=$BATCH_SIZE \
        +data.max_prompt_length=7680 \
        +data.filter_overlong_prompts=False \
        data.output_path="\\'${OUTPUT_PARQUET_FILES}\\'" \
        +data.dataloader_num_workers=1 \
        model.path=$LOCAL_MODEL_CHECKPOINT \
        rollout.temperature=$TEMPERATURE \
        rollout.top_p=1.0 \
        rollout.prompt_length=7680 \
        rollout.response_length=512 \
        rollout.tensor_model_parallel_size=1 \
        rollout.gpu_memory_utilization=0.9 \
        rollout.max_num_batched_tokens=65536 \
        rollout.n=$N_SAMPLES \
        +rollout.limit_images=3 $@ | tee /dev/tty | grep -o "raysubmit_[a-zA-Z0-9]*" | xargs -I{} ray job logs --follow {}
    ray stop

    # Merge the datasets
    python3 orby/data/merge_parquet.py --input_dir $LOCAL_OUTPUT_PARQUET_DIR --pattern "split_00*.parquet" --output_file $LOCAL_OUTPUT_PARQUET

    # Evaluation
    python3 -u -m orby.trainer.main_eval \
        data.path=$LOCAL_OUTPUT_PARQUET \
        data.prompt_key=prompt \
        data.response_key=predictions \
        +data.save_scores=True \
        custom_reward_function.path=$REWARD_FILE \
        custom_reward_function.name=$REWARD_FN \
        +custom_reward_function.reward_kwargs.coordinates_metric=$COORDINATES_METRIC \
        +custom_reward_function.reward_kwargs.coordinates_gaussian_sigma=$COORDINATES_GAUSSIAN_SIGMA \
        +custom_reward_function.reward_kwargs.coordinates_pixel_square_size=$COORDINATES_PIXEL_SQUARE_SIZE

    # Upload dataset to S3
    aws s3 cp $LOCAL_OUTPUT_PARQUET $S3_OUTPUT_PARQUET
  fi
